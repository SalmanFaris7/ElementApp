/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Code.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author Saleem Malik
 */
public class SearchUI extends javax.swing.JFrame {

    /**
     * Creates new form SearchUI
     */
    Element elementList[];
    Element workSpace[];
    int index = 0;

    public SearchUI() {
        initComponents();
        elementList = new Element[150];
        workSpace = new Element[150];
        index = 0;

        readData();
    }

    public void readData() {
        try {
            FileReader fr = new FileReader("C:\\Users\\Saleem Malik\\Documents\\Y2-sem2----\\DSA\\elements.txt");
            BufferedReader br = new BufferedReader(fr);
            String details[];
            String line = br.readLine();

            while (line != null) {
                details = line.split(",");
                elementList[index++] = new Element(details[0].trim(), details[1].trim());

                line = br.readLine();
            }

            br.close();
        } catch (IOException e1) {
            System.out.println("Error in File reading!!!");
        } catch (Exception e2) {
            System.out.println("Error in processing!!!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtElements = new javax.swing.JTextArea();
        txtName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtElements.setColumns(20);
        txtElements.setRows(5);
        jScrollPane1.setViewportView(txtElements);

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View All Elements in Ascending Order");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("View All Elements in Descending Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(txtName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(40, 40, 40)
                        .addComponent(jButton4)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            recMergeSort(workSpace, 0, index - 1);
            String details = "";
            for (int i = 0; i < index; i++) {
                details += "\n Name: " + elementList[i].getAcronym() + "\n"
                        + "Meaning : " + elementList[i].getMeaning() + "\n";
            }
            txtElements.setText(details);
        } catch (Exception e) {
            txtElements.setText("No results found");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            recMergeSort(workSpace, 0, index - 1);
            int i = binarySearch(txtName.getText().trim());
            if (i != -1) {
                String details = "\n Name: " + elementList[i].getAcronym() + "\n"
                        + "Meaning : " + elementList[i].getMeaning() + "\n";
                txtElements.setText(details);
            }

        } catch (Exception e) {
            txtElements.setText("No results found");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            recQuickSort(0, index - 1);
            String details = "";
            for (int i = 0; i < index; i++) {
                details += "\n Name: " + elementList[i].getAcronym() + "\n"
                        + "Meaning : " + elementList[i].getMeaning() + "\n";
            }
            txtElements.setText(details);
        } catch (Exception e) {
            txtElements.setText("No results found");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchUI().setVisible(true);
            }
        });
    }

    int binarySearch(String name) {
        int bottom = 0;
        int top = index - 1;
        int middle = (bottom + top) / 2;
        boolean found = false;
        while ((bottom <= top) && (found == false)) {
            if (elementList[middle].getAcronym().equalsIgnoreCase(name)) {
                found = true;
            } else {
                if (elementList[middle].getAcronym().compareTo(name) > 0) {
                    top = middle - 1;
                } else {
                    bottom = middle + 1;
                }
                middle
                        = (bottom + top) / 2;
            }
        }
        if (found == false) {
            return -1;
        } else {
            return middle;
        }
    }

    public void recQuickSort(int left, int right) {
        if (right - left <= 0) // if size <= 1,
        {
            return; // already sorted
        } else // size is 2 or larger
        {
            int partition = partitionIt(left, right, elementList[right].getAcronym());
// partition range
            recQuickSort(left, partition - 1); // sort left side
            recQuickSort(partition + 1, right); // sort right side
        }
    } // end recQuickSort()

    public int partitionIt(int left, int right, String pivot) {
        int leftPtr = left - 1; // left (after ++)
        int rightPtr = right; // right-1 (after --)
        while (true) { // find bigger item
            while (elementList[++leftPtr].getAcronym().compareTo(pivot) > 0) ;
// find smaller item
            while (rightPtr > 0 && elementList[--rightPtr].getAcronym().compareTo(pivot) < 0);
            if (leftPtr >= rightPtr) // if pointers cross,
            {
                break; // partition done
            } else // not crossed, so
            {
                swap(leftPtr, rightPtr); // swap elements
            }
        } // end while(true)
        swap(leftPtr, right); // restore pivot
        return leftPtr; // return pivot location
    } // end partitionlt()    

    public void swap(int a, int b) {
        Element temp = elementList[a];
        elementList[a] = elementList[b];
        elementList[b] = temp;
    }

    private void recMergeSort(Element workSpace[], int lowerBound, int upperBound) {
        if (lowerBound == upperBound) // if range is 1,
        {
            return; // no use sorting
        } else {
            int mid = (lowerBound + upperBound) / 2; // find midpoint
            recMergeSort(workSpace, lowerBound, mid); // sort low half
            recMergeSort(workSpace, mid + 1, upperBound); // sort high half
            merge(workSpace, lowerBound, mid + 1, upperBound); // merge them
        } // end else
    } // end recMergeSort

    private void merge(Element workSpace[], int lowPtr, int highPtr, int upperBound) {
        int j = 0; // workspace index
        int lowerBound = lowPtr;
        int mid = highPtr - 1;
        int n = upperBound - lowerBound + 1;
        while (lowPtr <= mid && highPtr <= upperBound) {
            if (elementList[lowPtr].getAcronym().compareToIgnoreCase(elementList[highPtr].getAcronym()) < 0) {
                workSpace[j++] = elementList[lowPtr++];
            } else {
                workSpace[j++] = elementList[highPtr++];
            }
        }
        while (lowPtr <= mid) {
            workSpace[j++] = elementList[lowPtr++];
        }
        while (highPtr <= upperBound) {
            workSpace[j++] = elementList[highPtr++];
        }
        for (j = 0; j < n; j++) {
            elementList[lowerBound + j] = workSpace[j];
        }
    } // end merge ()

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtElements;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
